Here's a step-by-step breakdown for setting up EKS with the necessary IAM roles and tools, along with commands:

### 1. **Create an IAM User and Assign Permissions for EKS Access**
- Create an IAM user that will have access to EKS:
  1. In the AWS Console, navigate to **IAM > Users** and create a new user.
  2. Attach the following policies:
     - `AmazonAdmin

- **Create an IAM Role for EC2 with Admin Access**:
   1. In IAM, navigate to **Roles** and create a new role.
   2. Select **EC2** as the trusted entity.
   3. Attach the **AdministratorAccess** policy to this role.
   4. Assign this role to your EC2 instances to give them admin-level permissions.

### 2. **Install eksctl Tool**
```bash
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
eksctl version
```

### 3. **Install `kubectl` (Kubernetes CLI)**
Ensure you install a version compatible with your EKS cluster (example here is version `1.21.14`):
```bash
curl -LO https://dl.k8s.io/release/v1.21.14/bin/linux/amd64/kubectl
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
kubectl version --client
```

### 4. **Install AWS CLI and Configure It**
1. Install the AWS CLI:
   ```bash
   curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
   unzip awscliv2.zip
   sudo ./aws/install
   ```

2. Configure AWS CLI with your credentials:
   ```bash
   aws configure
   # Provide the Access Key, Secret Access Key, region, and output format
   ```

### 5. **Create an EKS Cluster Without a Node Group**
This will create only the EKS Control Plane:
```bash
eksctl create cluster --name=jawan --region=ap-south-1 --version 1.24 --zones=ap-south-1a,ap-south-1b --without-nodegroup
```

### 6. **Associate an IAM OIDC Provider with the EKS Cluster**
This step is required to enable IAM roles for Kubernetes service accounts.
```bash
eksctl utils associate-iam-oidc-provider --region ap-south-1 --cluster jawan --approve
```

### 7. **Create an EC2 Key Pair**
You can either create a new key pair in the EC2 Console or use an existing one.

### 8. **Create a Node Group with IAM Policies and Add-ons in Public Subnets**
This will create a managed node group in public subnets and automatically set up the required IAM policies.
```bash
eksctl create nodegroup --cluster=jawan \
                       --region=ap-south-1 \
                       --name=jawan-ng-public1 \
                       --node-type=t3.small \
                       --nodes=2 \
                       --nodes-min=2 \
                       --nodes-max=4 \
                       --node-volume-size=8 \
                       --ssh-access \
                       --ssh-public-key=doc123456 \  # Replace with your key
                       --managed \
                       --asg-access \
                       --external-dns-access \
                       --full-ecr-access \
                       --appmesh-access \
                       --alb-ingress-access
```

### 9. **Verify Subnet Connectivity and Security Groups**
Ensure that all traffic is allowed within the security groups by setting appropriate inbound rules.

### 10. **Update `kubeconfig` for Cluster Access**
Retrieve the kubeconfig file for your EKS cluster to manage it with `kubectl`:
```bash
aws eks update-kubeconfig --region ap-south-1 --name jawan
```

### 11. **Check Nodes and Cluster Capacity**
- Verify the nodes in your cluster:
  ```bash
  kubectl get nodes
  kubectl get nodes -o wide
  ```
- Get the capacity of pods that can run in the cluster:
  ```bash
  kubectl get node -o yaml | grep pods
  ```

By following these steps, you'll have a functional EKS cluster with the necessary IAM roles, nodes, and access permissions.
